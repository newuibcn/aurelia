System.register(['aurelia-framework'], function(exports_1) {
    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = (this && this.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var aurelia_framework_1;
    var PackerCustomElement;
    return {
        setters:[
            function (aurelia_framework_1_1) {
                aurelia_framework_1 = aurelia_framework_1_1;
            }],
        execute: function() {
            PackerCustomElement = (function () {
                function PackerCustomElement(_element) {
                    this._element = _element;
                    this.sorter = {
                        random: function (a, b) {
                            return Math.random() - 0.5;
                        },
                        w: function (a, b) {
                            return b.w - a.w;
                        },
                        h: function (a, b) {
                            return b.h - a.h;
                        },
                        a: function (a, b) {
                            return b.area - a.area;
                        },
                        max: function (a, b) {
                            return Math.max(b.w, b.h) - Math.max(a.w, a.h);
                        },
                        min: function (a, b) {
                            return Math.min(b.w, b.h) - Math.min(a.w, a.h);
                        },
                        height: (function (a, b) {
                            return this.sorter.msort(a, b, ['h', 'w']);
                        }).bind(this),
                        width: (function (a, b) {
                            return this.sorter.msort(a, b, ['w', 'h']);
                        }).bind(this),
                        area: (function (a, b) {
                            return this.sorter.msort(a, b, ['a', 'h', 'w']);
                        }).bind(this),
                        maxside: (function (a, b) {
                            return this.sorter.msort(a, b, ['max', 'min', 'h', 'w']);
                        }).bind(this),
                        msort: (function (a, b, criteria) {
                            var diff, n;
                            for (n = 0; n < criteria.length; n++) {
                                diff = this.sorter[criteria[n]](a, b);
                                if (diff != 0)
                                    return diff;
                            }
                            return 0;
                        }).bind(this),
                        now: function (blocks) {
                            blocks.sort(this.maxside);
                        }
                    };
                }
                PackerCustomElement.prototype.attached = function () {
                    this.root = { x: 0, y: 0, w: $(this._element).width(), h: $(this._element).height() };
                    this.fit(this.getTiles(this._element.getElementsByTagName('paper-card')));
                };
                PackerCustomElement.prototype.getTiles = function (elements) {
                    var tile, tiles = [];
                    for (var i = 0; i < elements.length; i++) {
                        tile = { node: elements[i], w: $(elements[i]).width(), h: $(elements[i]).height() };
                        tiles.push(tile);
                    }
                    tiles.sort(function (a, b) {
                        return a.h > b.h ? 1 :
                            a.h < b.h ? -1 : 0;
                    });
                    return tiles;
                };
                PackerCustomElement.prototype.fit = function (tiles) {
                    var n, node, tile;
                    this.root = { x: 0, y: 0, w: tiles[0].w, h: tiles[0].h };
                    for (n = 0; n < tiles.length; n++) {
                        tile = tiles[n];
                        if (node = this.findNode(this.root, tile.w, tile.h)) {
                            tile.fit = this.splitNode(node, tile.w, tile.h);
                        }
                        else {
                            tile.fit = this.growNode(tile.w, tile.h);
                        }
                    }
                    for (var n = 0; n < tiles.length; n++) {
                        var tile = tiles[n];
                        if (tile.fit) {
                            var parentOffset = $(this._element).offset();
                            $(tile.node).offset({ left: parentOffset.left + tile.fit.x, top: parentOffset.top + tile.fit.y });
                        }
                    }
                };
                PackerCustomElement.prototype.growNode = function (w, h) {
                    var canGrowDown = (w <= this.root.w);
                    var canGrowRight = (h <= this.root.h);
                    var shouldGrowRight = canGrowRight && (this.root.h >= (this.root.w + w));
                    var shouldGrowDown = canGrowDown && (this.root.w >= (this.root.h + h));
                    if (shouldGrowRight)
                        return this.growRight(w, h);
                    else if (shouldGrowDown)
                        return this.growDown(w, h);
                    else if (canGrowRight)
                        return this.growRight(w, h);
                    else if (canGrowDown)
                        return this.growDown(w, h);
                    else
                        return null;
                };
                PackerCustomElement.prototype.growRight = function (w, h) {
                    var node;
                    this.root = {
                        used: true,
                        x: 0,
                        y: 0,
                        w: this.root.w + w,
                        h: this.root.h,
                        down: this.root,
                        right: { x: this.root.w, y: 0, w: w, h: this.root.h }
                    };
                    if (node = this.findNode(this.root, w, h))
                        return this.splitNode(node, w, h);
                    else
                        return null;
                };
                PackerCustomElement.prototype.growDown = function (w, h) {
                    var node;
                    this.root = {
                        used: true,
                        x: 0,
                        y: 0,
                        w: this.root.w,
                        h: this.root.h + h,
                        down: { x: 0, y: this.root.h, w: this.root.w, h: h },
                        right: this.root
                    };
                    if (node = this.findNode(this.root, w, h))
                        return this.splitNode(node, w, h);
                    else
                        return null;
                };
                PackerCustomElement.prototype.findNode = function (root, w, h) {
                    if (root.used)
                        return this.findNode(root.right, w, h) || this.findNode(root.down, w, h);
                    else if ((w <= root.w) && (h <= root.h))
                        return root;
                    else
                        return null;
                };
                PackerCustomElement.prototype.splitNode = function (node, w, h) {
                    node.used = true;
                    node.down = { x: node.x, y: node.y + h, w: node.w, h: node.h - h };
                    node.right = { x: node.x + w, y: node.y, w: node.w - w, h: h };
                    return node;
                };
                PackerCustomElement = __decorate([
                    aurelia_framework_1.customAttribute('packer'),
                    aurelia_framework_1.autoinject, 
                    __metadata('design:paramtypes', [Element])
                ], PackerCustomElement);
                return PackerCustomElement;
            })();
            exports_1("PackerCustomElement", PackerCustomElement);
        }
    }
});

//# sourceMappingURL=data:application/json;base64,
